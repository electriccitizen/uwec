/* ============
	MIXINS
======================= */

@use 'colors';
@use 'component-colors';
@use 'fonts';
@use 'units';
@use 'sass:math';

/* TRANSFORM & TRANSITION MIXINS
------------------------------ */

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
@mixin translateX ($x) {
	@include transform(translateX($x));
}
@mixin translateY ($y) {
	@include transform(translateY($y));
}
@mixin translate3d ($x, $y, $z) {
	@include transform(translate3d($x, $y, $z));
}

@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin scale($scalex, $scaley) {
	@include transform(scale($scalex, $scaley));
}
@mixin scale3d($scalex, $scaley, $scalez) {
	@include transform(scale($scalex, $scaley, $scalez));
}

@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
@mixin rotate3d ($rotx, $roty, $rotz, $deg) {
	@include transform(rotate3d($rotx, $roty, $rotz, #{$deg}deg));
}

@mixin backfaceVisibility($backface){
	-webkit-backface-visiblity: $backface;
	-moz-backface-visiblity: $backface;
	backface-visiblity: $backface;
}

@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
	backface-visibility: hidden;
}
@mixin transAll($time){
	transition: all $time ease;
	-moz-transition: all $time ease;
	-webkit-transition: all $time ease;
	-webkit-transform: translateZ(0);
}
@mixin transClear{
	transition: none;
	-moz-transition: none;
	-webkit-transition: none;
}
@mixin transFormAnimate{
	-webkit-transition: -webkit-transform 0.15s ease-in 0s;
	transition: -webkit-transform 0.15s ease-in 0s;
	transition: transform 0.15s ease-in 0s;
	transition: transform 0.15s ease-in 0s, -webkit-transform 0.15s ease-in 0s;
}


/* LAYOUT MIXINS
---------------------------- */

@mixin cssColumns($columns, $gap, $break){
	-webkit-column-count: #{$columns};
	-moz-column-count: #{$columns};
	column-count: #{$columns};
	-webkit-column-gap: #{$gap};
	-moz-column-gap: #{$gap};
	column-gap: #{$gap};
	@if $break == 'nobreak'{
		& > *{
			display: block;
			-webkit-column-break-inside: avoid;
			page-break-inside: avoid;
			break-inside: avoid;
			overflow: hidden;
		}
	}
}

@mixin clearFix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}

@mixin safeFlex($direction, $wrap, $justify, $align){
	display: flex;
	display: -ms-flexbox;
	flex-direction: $direction;
	-ms-flex-direction: $direction;
	@if $wrap == 'wrap'{
		flex-wrap: wrap;
		-ms-flex-wrap: wrap;
	}@else{
		flex-wrap: nowrap;
		-ms-flex-wrap: none;
	}
	@if $justify == 'start'{
		justify-content: flex-start;
		-ms-flex-pack: start;
	}@else if $justify == 'end'{
		justify-content: flex-end;
		-ms-flex-pack: end;
	}@else if $justify == 'center'{
		justify-content: center;
		-ms-flex-pack: center;
	}@else if  $justify == 'justify'{
		justify-content: space-between;
		-ms-flex-pack: justify;
	}
	@else if  $justify == 'left'{
		justify-content: left;
		-ms-flex-pack: left;
	}
	@if $align == 'start'{
		align-items: flex-start;
		-ms-flex-align: start;
	}@else if $align == 'end'{
		align-items: flex-end;
		-ms-flex-align: end;
	}@else if $align == 'center'{
		align-items: center;
		-ms-flex-align: center;
	}@else if $align == 'stretch'{
		align-items: stretch;
		-ms-flex-align: stretch;
	}@else if $align == 'baseline'{
		align-items: baseline;
		-ms-flex-align: baseline;
	}
}//end safe-flex

@mixin safeFlexSize($grow, $shrink, $size){
	flex: $grow $shrink $size;
	-ms-flex: $grow $shrink $size;
}

@mixin safeFlexOrder($order){
	order: $order;
	-ms-flex-order: $order;
}

@mixin bleed($bleedType,$bleedWidth){
	margin-left: $bleedWidth * -0.5;
	margin-right: $bleedWidth * -0.5;
	width: calc(100% + #{$bleedWidth});
	& > *{
		@if $bleedType == 'margin'{
			margin-left: $bleedWidth * 0.5;
			margin-right: $bleedWidth * 0.5;
		}@else if $bleedType == 'padding'{
			padding-left: $bleedWidth * 0.5;
			padding-right: $bleedWidth * 0.5;
		}
	}
}

/*  STYLE MIXINS
------------------- */

@mixin browserWipe{
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

@mixin buttonWipe{
	@include browserWipe;
	background: none;
	border: none;
	color: inherit;
}

@mixin visuallyHidden{
	position: absolute;
	left: -900vw;
	top: 0;
	font-size: 1px;
	opacity: .1;
}
.visually-hidden {
	@include visuallyHidden;
}

@mixin overlay($overlayColor){
	&:before{
		content: '';
		display: block;
		width: 100%;
		height: 100%;
		background: $overlayColor;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 2;
	}
}

@mixin listReset {
	list-style: none;
	margin: 0;
	padding: 0;
}

@mixin fullBack($fullback){
	content: '';
	display: block;
	position: absolute;
	top: 0;
	left: -50vw;
	z-index: -1;
	width: 200vw;
	height: 100%;
	background: $fullback;
}

@mixin vertRule($rulePosition,$ruleHeight,$ruleColor) {
	content: '';
	display: block;
	position: absolute;
	#{$rulePosition}: 0;
	top: math.div(100% - $ruleHeight, 2);
	width: 1px;
	height: $ruleHeight;
	background: $ruleColor;
}

@mixin gradient($grad-direction,$grad-start,$gradStartPercent,$grad-stop) {
	background: -moz-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* FF3.6+ */
	background: -webkit-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* IE10+ */
	@if $grad-direction == 'top'{
		background: linear-gradient(to bottom, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'bottom'{
		background: linear-gradient(to top, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'left'{
		background: linear-gradient(to right, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'right'{
		background: linear-gradient(to left, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}
}

@mixin fullImageOverlay{
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	height: 70%;
	z-index: 1;
	@include gradient(top,rgba(217, 217, 217, 0),0,$navy);
}

@mixin triangle($triDirection,$triHeight,$triWidth,$triColor){
	width: 0;
	height: 0;
	-webkit-transform: rotate(0.05deg);
	-moz-transform: scale(1.1);
	transform: rotate(0.05deg);
	$actualWidth: math.div($triWidth, 2);
	$actualHeight: math.div($triWidth, 2);
	@if $triDirection == 'up'{
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-bottom: $triHeight solid $triColor;
	}@else if $triDirection == 'down'{
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-top: $triHeight solid $triColor;
	}@else if $triDirection == 'left'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-right: $triWidth solid $triColor;
	}@else if $triDirection == 'right'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-left: $triWidth solid $triColor;
	}
}

@mixin lightBack($lightText,$lightLink) {
	h1,h2,h3,h4,h5,h6,p,div,li,.field-caption {
		color: $lightText;
		-webkit-font-smoothing: subpixel-antialiased;

	}
	:before,:after{
		color: $lightText;
	}
	a{
		color: $lightLink;
		&:hover,&:focus{
			opacity: .6;
			@include transAll(.3s);
		}
	}
}//end lightBack

@mixin darkBack($darkText,$darkLink) {
	h1,h2,h3,h4,h5,h6,p,div,li,.field-caption {
		color: $darkText;
		-webkit-font-smoothing: antialiased;
	}
	:before,:after{
		color: $darkText;
	}
	a{
		color: $darkLink;
		&:hover,&:focus{
			opacity: .6;
			@include transAll(.3s);
		}
	}
}//end lightBack

@mixin setDimensions($width,$height){
	width: #{$width};
	height: #{$height};
}

@mixin narrowStripes($stripeColor){
	content: '';
	display: block;
	position: absolute;
	bottom: -50px;
	left: -100px;
	width: 200px;
	height: 100px;
	z-index: -1;
	background: repeating-linear-gradient(
	  -16deg,
	  #{$stripeColor},
	  #{$stripeColor} 1px,
	  transparent 1px,
	  transparent 16px
	);
	clip-path: polygon(0 0, 100% 0, 100% 43%, 0 100%);
}

@mixin fatStripes($stripeColor){
	content: '';
	display: block;
	position: absolute;
	top: 0px;
	left: -100px;
	width: 170px;
	height: 230px;
	z-index: -1;
	background: repeating-linear-gradient(
	  0deg,
	  #{$stripeColor},
	  #{$stripeColor} 40px,
	  transparent 40px,
	  transparent 80px
	);
	@include skew(0,-16);
}

@mixin rightArrow($arrowColor,$arrowBack,$arrowBorder,$arrowSize){
	@if $arrowSize == 'sm'{
		width: 20px;
		height: 20px;
	}@else if $arrowSize == 'lg'{
		width: 40px;
		height: 40px;
	}
	border-radius: 50%;
	border: 1px solid $arrowBorder;
	background-color: $arrowBack;
	background-image: url(../images/arrows/right-arrow-#{$arrowColor}-#{$arrowSize}.svg);
	background-repeat: no-repeat;
	background-size: 50%;
	background-position: 50% 50%;
}

@mixin dottedLink($dotColor){
	background-image: linear-gradient(to right, $dotColor 33%, rgba(0,0,0,0) 0%);
	background-position: bottom;
	background-size: 4px 1px;
	background-repeat: repeat-x;
}

@mixin factsGrid{
	.fact-1{
		grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 2;
	}
	.fact-2{
		grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 1;
    grid-row-end: 2;
	}
	&.facts-count-3,&.facts-count-5{
		.fact-1{
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-2{
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-3{
			grid-column-start: 2;
	    grid-column-end: 3;
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
	}//end facts count 3
	&.facts-count-4{
		.fact-3{
			grid-column-start: 3;
	    grid-column-end: 4;
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-4{
			grid-column-start: 1;
	    grid-column-end: 2;
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
	}//end facts count 4
	&.facts-count-5{
		.fact-4{
			grid-column-start: 1;
	    grid-column-end: 2;
	    grid-row-start: 1;
	    grid-row-end: 2;
		}
		.fact-5{
			grid-column-start: 3;
	    grid-column-end: 4;
	    grid-row-start: 1;
	    grid-row-end: 2;
		}
	}//end facts count 5
}//end facts grid

@mixin exposedForm{
	background: #f8f7f6;
	max-width: 894px;
	margin: 0 auto 60px;
	padding: 30px 60px 44px;
}

@mixin styledHeader{
	line-height: 1.1;
	font-weight: 500;
	font-family: grad, serif;
	color: #06233d;
	margin: 0;
	font-feature-settings: "liga", "dlig";
	font-size: 73px;
	line-height: 73px;
	text-align: center;
	font-style: italic;
	text-transform: uppercase;
	letter-spacing: 3.65px;
	strong{
		font-size: 78.731px;
		line-height: normal;
		font-style: normal;
		font-family: vinila-extended, sans-serif;
		font-weight: 800;
		letter-spacing: normal;
		white-space: pre;
	}
}

/* ANIMATION MIXINS
--------------------- */
@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}
	-webkit-animation: $animations;
	-moz-animation:    $animations;
	-o-animation:      $animations;
	animation:         $animations;
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

@include keyframes(fadeIn){
	from{
		opacity: 0;
	}
	50%{
		opacity: .5;
	}
	100%{
		opacity: 1;
	}
}

.fadeIn {
	@include animation('fadeIn 1.5s 1');
}


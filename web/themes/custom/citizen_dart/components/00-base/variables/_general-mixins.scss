/* ============
	MIXINS
======================= */

@use 'colors' as c;
@use 'component-colors' as cc;
@use 'fonts' as f;
@use 'units' as u;
@use 'sass:math';
@use 'sass:list';

/* TRANSFORM & TRANSITION MIXINS
------------------------------ */

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}
@mixin translateX ($x) {
	@include transform(translateX($x));
}
@mixin translateY ($y) {
	@include transform(translateY($y));
}
@mixin translate3d ($x, $y, $z) {
	@include transform(translate3d($x, $y, $z));
}

@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin scale($scalex, $scaley) {
	@include transform(scale($scalex, $scaley));
}
@mixin scale3d($scalex, $scaley, $scalez) {
	@include transform(scale($scalex, $scaley, $scalez));
}

@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
@mixin rotate3d ($rotx, $roty, $rotz, $deg) {
	@include transform(rotate3d($rotx, $roty, $rotz, #{$deg}deg));
}

@mixin backfaceVisibility($backface){
	-webkit-backface-visiblity: $backface;
	-moz-backface-visiblity: $backface;
	backface-visiblity: $backface;
}

@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
	backface-visibility: hidden;
}
@mixin transAll($time){
	transition: all $time ease;
	-moz-transition: all $time ease;
	-webkit-transition: all $time ease;
	-webkit-transform: translateZ(0);
}
@mixin transClear{
	transition: none;
	-moz-transition: none;
	-webkit-transition: none;
}
@mixin transFormAnimate{
	-webkit-transition: -webkit-transform 0.15s ease-in 0s;
	transition: -webkit-transform 0.15s ease-in 0s;
	transition: transform 0.15s ease-in 0s;
	transition: transform 0.15s ease-in 0s, -webkit-transform 0.15s ease-in 0s;
}


/* LAYOUT MIXINS
---------------------------- */

@mixin cssColumns($columns, $gap, $break){
	-webkit-column-count: #{$columns};
	-moz-column-count: #{$columns};
	column-count: #{$columns};
	-webkit-column-gap: #{$gap};
	-moz-column-gap: #{$gap};
	column-gap: #{$gap};
	@if $break == 'nobreak'{
		& > *{
			display: block;
			-webkit-column-break-inside: avoid;
			page-break-inside: avoid;
			break-inside: avoid;
			overflow: hidden;
		}
	}
}

@mixin clearFix {
	&::after {
		clear: both;
		content: "";
		display: table;
	}
}

@mixin safeFlex($direction, $wrap, $justify, $align){
	display: flex;
	display: -ms-flexbox;
	flex-direction: $direction;
	-ms-flex-direction: $direction;
	@if $wrap == 'wrap'{
		flex-wrap: wrap;
		-ms-flex-wrap: wrap;
	}@else{
		flex-wrap: nowrap;
		-ms-flex-wrap: none;
	}
	@if $justify == 'start'{
		justify-content: flex-start;
		-ms-flex-pack: start;
	}@else if $justify == 'end'{
		justify-content: flex-end;
		-ms-flex-pack: end;
	}@else if $justify == 'center'{
		justify-content: center;
		-ms-flex-pack: center;
	}@else if  $justify == 'justify'{
		justify-content: space-between;
		-ms-flex-pack: justify;
	}
	@else if  $justify == 'left'{
		justify-content: left;
		-ms-flex-pack: left;
	}
	@if $align == 'start'{
		align-items: flex-start;
		-ms-flex-align: start;
	}@else if $align == 'end'{
		align-items: flex-end;
		-ms-flex-align: end;
	}@else if $align == 'center'{
		align-items: center;
		-ms-flex-align: center;
	}@else if $align == 'stretch'{
		align-items: stretch;
		-ms-flex-align: stretch;
	}@else if $align == 'baseline'{
		align-items: baseline;
		-ms-flex-align: baseline;
	}
}//end safe-flex

@mixin safeFlexSize($grow, $shrink, $size){
	flex: $grow $shrink $size;
	-ms-flex: $grow $shrink $size;
}

@mixin safeFlexOrder($order){
	order: $order;
	-ms-flex-order: $order;
}

@mixin bleed($bleedType,$bleedWidth){
	margin-left: $bleedWidth * -0.5;
	margin-right: $bleedWidth * -0.5;
	width: calc(100% + #{$bleedWidth});
	& > *{
		@if $bleedType == 'margin'{
			margin-left: $bleedWidth * 0.5;
			margin-right: $bleedWidth * 0.5;
		}@else if $bleedType == 'padding'{
			padding-left: $bleedWidth * 0.5;
			padding-right: $bleedWidth * 0.5;
		}
	}
}

/*  STYLE MIXINS
------------------- */

@mixin browserWipe{
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

@mixin buttonWipe{
	@include browserWipe;
	background: none;
	border: none;
	color: inherit;
}

@mixin visuallyHidden{
	position: absolute;
	left: -900vw;
	top: 0;
	font-size: 1px;
	opacity: .1;
}
.visually-hidden {
	@include visuallyHidden;
}

@mixin overlay($overlayColor){
	&:before{
		content: '';
		display: block;
		width: 100%;
		height: 100%;
		background: $overlayColor;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 2;
	}
}

@mixin listReset {
	list-style: none;
	margin: 0;
	padding: 0;
}

@mixin fullBack($fullback){
	content: '';
	display: block;
	position: absolute;
	top: 0;
	left: -50vw;
	z-index: -1;
	width: 200vw;
	height: 100%;
	background: $fullback;
}

@mixin vertRule($rulePosition,$ruleHeight,$ruleColor) {
	content: '';
	display: block;
	position: absolute;
	#{$rulePosition}: 0;
	top: math.div(100% - $ruleHeight, 2);
	width: 1px;
	height: $ruleHeight;
	background: $ruleColor;
}

@mixin gradient($grad-direction,$grad-start,$gradStartPercent,$grad-stop) {
	background: -moz-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* FF3.6+ */
	background: -webkit-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient($grad-direction, $grad-start $gradStartPercent,$grad-stop 100%); /* IE10+ */
	@if $grad-direction == 'top'{
		background: linear-gradient(to bottom, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'bottom'{
		background: linear-gradient(to top, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'left'{
		background: linear-gradient(to right, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}@else if $grad-direction == 'right'{
		background: linear-gradient(to left, $grad-start $gradStartPercent,$grad-stop 100%); /* W3C */
	}
  @else {
    background: linear-gradient($grad-direction, $grad-start $gradStartPercent, $grad-stop 100%);
  }
}

@mixin fullImageOverlay{
	position: absolute;
	bottom: 0;
	left: 0;
	width: 100%;
	height: 70%;
	z-index: 1;
	@include gradient(top,rgba(217, 217, 217, 0),0, c.$navy);
}

@mixin triangle($triDirection,$triHeight,$triWidth,$triColor){
	width: 0;
	height: 0;
	-webkit-transform: rotate(0.05deg);
	-moz-transform: scale(1.1);
	transform: rotate(0.05deg);
	$actualWidth: math.div($triWidth, 2);
	$actualHeight: math.div($triWidth, 2);
	@if $triDirection == 'up'{
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-bottom: $triHeight solid $triColor;
	}@else if $triDirection == 'down'{
		border-right: $actualWidth double rgba(0,0,0,0);
		border-left: $actualWidth double rgba(0,0,0,0);
		border-top: $triHeight solid $triColor;
	}@else if $triDirection == 'left'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-right: $triWidth solid $triColor;
	}@else if $triDirection == 'right'{
		border-top: $actualHeight double rgba(0,0,0,0);
		border-bottom: $actualHeight double rgba(0,0,0,0);
		border-left: $triWidth solid $triColor;
	}
}

@mixin blueTriangle{
  content: '';
  display: block;
  position: absolute;
  top: calc(100% - 1px);
  left: 0;
  height: 29vw;
  width: 100vw;
  z-index: -1;
  background: c.$royal;
  clip-path: polygon(0 0, 100% 0, 0 100%);
}

@mixin lightBack($lightText,$lightLink) {
	h1,h2,h3,h4,h5,h6,p,div,li,.field-caption {
		color: $lightText;
		-webkit-font-smoothing: subpixel-antialiased;

	}
	:before,:after{
		color: $lightText;
	}
	a{
		color: $lightLink;
		&:hover,&:focus{
			opacity: .6;
			@include transAll(.3s);
		}
	}
}//end lightBack

@mixin darkBack($darkText,$darkLink) {
	h1,h2,h3,h4,h5,h6,p,div,li,.field-caption {
		color: $darkText;
		-webkit-font-smoothing: antialiased;
	}
	:before,:after{
		color: $darkText;
	}
	a{
		color: $darkLink;
		&:hover,&:focus{
			opacity: .6;
			@include transAll(.3s);
		}
	}
}//end lightBack

@mixin setDimensions($width,$height){
	width: #{$width};
	height: #{$height};
}

@mixin rollingSeal {
  padding-top: 8rem;
  position: relative;
  margin: 0 auto -3rem;
  max-width: 400px;
  &:before {
    background: url("../images/logos-badges/seal.svg") no-repeat transparent;
    content: '';
    display: none;
    height: 125px;
    position: absolute;
    right: 200vw;
    top: 1rem;
    width: 125px;
    z-index: -1;
  }
  &.visible:before {
    @include animation('sealRollRight 1s');
    display: block;
    right: 8%;
  }
  @include u.desk {
    max-width: 100%;
    margin-bottom: 0;
    &:before {
      top: 20px;
      width: 152px;
      height: 152px;
    }
    &.visible:before {
      @include animation('sealRollRightDesk 1s');
      right: 86%;
    }
  }
}

@mixin narrowStripes($stripeColor){
	content: '';
	display: block;
	position: absolute;
	bottom: -50px;
	left: -100px;
	width: 263px;
	height: 171px;
	z-index: -1;
	background: repeating-linear-gradient(
	  -16deg,
	  #{$stripeColor},
	  #{$stripeColor} 1px,
	  transparent 1px,
	  transparent 16px
	);
	clip-path: polygon(0 0, 100% 0, 100% 43%, 0 100%);
}

@mixin fatStripes($stripeColor, $size: 40px){
	content: '';
	display: block;
	position: absolute;
	top: 0px;
	left: -100px;
	width: 170px;
	height: 230px;
	z-index: -1;
	background: repeating-linear-gradient(
	  0deg,
	  $stripeColor,
	  $stripeColor $size,
	  transparent $size,
	  transparent calc($size * 2)
	);
	@include skew(0,-16);
}

@mixin rightArrow($arrowBack,$arrowBorder,$arrowSize){
	@if $arrowSize == 'sm'{
		width: 25px;
		height: 25px;
	}@else if $arrowSize == 'lg'{
		width: 40px;
		height: 40px;
	}
	border-radius: 50%;
	border: 1px solid $arrowBorder;
	background-color: $arrowBack;
	background-image: url(../images/arrows/right-arrow-royal-sm.svg);
	background-repeat: no-repeat;
	background-size: 50%;
	background-position: 50% 50%;
  box-sizing: border-box;
}

@mixin arrowLinkBefore($arrowLinkColor, $size: lg) {
  $font-size: 18px;
  $line-height: 1.22;
  $padding-left: 56px;

  @if $size == sm {
    $font-size: 16px;
    $line-height: 1.2;
    $padding-left: 32px;
  }

  color: #{$arrowLinkColor};
  display: inline-block;
  font-family: f.$header;
  font-size: $font-size;
  font-weight: 700;
  line-height: $line-height;
  position: relative;
  padding-left: $padding-left;
}

@mixin arrowLinkAfter($arrowLinkColor, $size: lg) {
  $font-size: 18px;
  $line-height: 1.22;

  @if $size == sm {
    $font-size: 16px;
    $line-height: 1.2;
  }

  color: $arrowLinkColor;
  font-family: f.$header;
  font-weight: 700;
  font-size: $font-size;
  line-height: $line-height;
}

@mixin dottedLink($dotColor){
	background-image: linear-gradient(to right, $dotColor 33%, rgba(0,0,0,0) 0%);
	background-position: bottom;
	background-size: 4px 1px;
	background-repeat: repeat-x;
}

// Parent mixin for both linkArrow and blockArrow, setting all themes and size
// choices regardless of whether the arrow appears before or after the element.
@mixin arrowLink($location: 'before', $theme: navy, $size: lg) {
  @include transAll(.3s);
  // Defaults are the settings for navy, lg.
  $arrow: c.$navy;
  $arrow-string: navy;
  $arrow-invert: white;
  $border: c.$navy;
  $hover-border: c.$navy;
  $back: transparent;
  $hover-back: $arrow;

  @if $theme == navyLight {
    $arrow-invert: navy;
    $hover-back: c.$white;
    $hover-border: c.$white;
  }
  @if $theme == royal {
    $arrow: c.$royal;
    $arrow-string: royal;
    $border: c.$gold;
    $back: c.$gold;
    $hover-border: c.$lightGold;
    $hover-back: c.$lightGold;
  }
  @if $theme == white {
    $arrow: c.$white;
    $arrow-string: white;
    $border: c.$gold;
    $arrow-invert: royal;
    $hover-border: c.$lightGold;
    $back: c.$gold;
    $hover-back: c.$lightGold;
  }
  @if $theme == gold {
    $arrow: c.$gold;
    $arrow-string: gold;
    $border: c.$gold;
    $hover-border: c.$lightGold;
    $arrow-invert: navy;
    $back: c.$gold;
    $hover-back: c.$lightGold;
  }
  @if $theme == goldRoyal {
    $arrow: c.$royal;
    $arrow-string: gold;
    $border: c.$gold;
    $hover-border: c.$lightGold;
    $arrow-invert: royal;
    $back: c.$gold;
    $hover-back: c.$lightGold;
  }

  @if $location == "after" {
    @include arrowLinkAfter($arrow, $size);
  }
  @else {
    @include arrowLinkBefore($arrow, $size);
  }

  &:#{$location} {
    content: '';
    @include rightArrow($back, $border, $size);
  }
  &:hover, &:focus {
    &:#{$location} {
      @include rightArrow($hover-back, $hover-border, $size);
    }
    span {
      text-decoration: underline;
    }
  }
}

// Based on the "Link Arrow" design, this adds a circle-arrow at the start of an
// element.
@mixin linkArrow($theme: navy, $size: lg) {
  // Defaults are the settings for navy, lg.
  @include arrowLink("before", $theme, $size);

  $top: -10px;

  @if $size == sm {
    $top: -2px;
  }

  &:before {
    display: block;
    left: 0;
    position: absolute;
    top: $top;
  }//end before
}

// Based on the "Block Arrow" design, this adds a circle-arrow at the end of an
// element.
@mixin blockArrow($theme: navy, $size: lg) {
  @include arrowLink("after", $theme, $size);

  $top: 4px;

  &:after {
    display: inline-block;
    margin-top: -$top;
    position: relative;
    top: $top;
  }
}

@mixin lineLink {
  border-bottom: 1px solid cc.$linkUnderline;
  display: inline-block;
  text-decoration: none;
  transition: color .3s, border-bottom-color .3s;
  &:hover {
    border-bottom: 1px solid transparent;
    color: cc.$linkUnderline;
    text-decoration: none;
  }
}

@mixin lineLinkHover {
  border-bottom: 1px solid transparent;
  display: inline-block;
  text-decoration: none;
  transition: color .3s, border-bottom-color .3s;
  &:hover {
    border-bottom: 1px solid cc.$linkUnderline;
    color: cc.$linkUnderline;
    text-decoration: none;
  }
}

@mixin factsGrid{
  .fact {
    min-width: 33%;
  }
	.fact-1{
		grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 2;
	}
	.fact-2{
		grid-column-start: 1;
    grid-column-end: 2;
    grid-row-start: 1;
    grid-row-end: 2;
    text-align: right;
	}
	&.facts-count-3,&.facts-count-5{
		.fact-1{
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-2{
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-3{
			grid-column-start: 2;
	    grid-column-end: 3;
	    grid-row-start: 2;
	    grid-row-end: 3;
      text-align: center;
		}
	}//end facts count 3
	&.facts-count-4{
		.fact-3{
			grid-column-start: 3;
	    grid-column-end: 4;
	    grid-row-start: 2;
	    grid-row-end: 3;
		}
		.fact-4{
			grid-column-start: 1;
	    grid-column-end: 2;
	    grid-row-start: 2;
	    grid-row-end: 3;
      text-align: right;
		}
	}//end facts count 4
	&.facts-count-5{
		.fact-4{
			grid-column-start: 1;
	    grid-column-end: 2;
	    grid-row-start: 1;
	    grid-row-end: 2;
      text-align: right;
		}
		.fact-5{
			grid-column-start: 3;
	    grid-column-end: 4;
	    grid-row-start: 1;
	    grid-row-end: 2;
		}
	}//end facts count 5
}//end facts grid

@mixin exposedForm{
	background: c.$royal;
	max-width: 894px;
	margin: 0 auto 60px;
  padding: 36px 20px 40px;
  @include u.desk{
	  padding: 30px 60px 60px;
    margin-bottom: 80px;
  }
  & > h2{
    font-family: f.$displayHeader;
    font-size: 21px;
    line-height: 1.14;
    margin-bottom: u.$spaceMd;
    margin-left: 20px;
  }
}

@mixin styledHeader($mobile-resize: false) {
  $main-size: 64px;
  $strong-size: 70px;

  @if $mobile-resize == true {
    $main-size: 43px;
    $strong-size: 46px;
  }
  display: block;
  text-align: center;
  text-transform: uppercase;
  line-height: 1;
  font-weight: 400;
  font-family: grad, serif;
  color: #06233d;
  font-feature-settings: "liga", "dlig";
  font-size: $main-size;
  font-style: italic;
  letter-spacing: .05em;
  @include u.desk{
    font-size: 73px;
  }
	strong{
		font-size: $strong-size;
		line-height: 1;
		font-family: f.$header;
		font-weight: 800;
    display: block;
    letter-spacing: 0;
    @include u.desk{
      line-height: 1;
      font-size: 79px;
    }
	}
}

@mixin profileSlider{
  position: relative;
  z-index: 1;
  max-width: 985px;
  margin-left: u.$siteMarginMobile * -1;
  margin-right: u.$siteMarginMobile * -1;
  @include u.desk{
    margin-left: auto;
    margin-right: auto;
  }
  &:after{
    @include fullBack(c.$ice);
    top: 86px;
    height: calc(100% - 86px);
  }
  .view-content{
    & > div{
      width: 100%;
    }
  }
  .slick-slider{
    .slick-arrow{
      top: 35%;
      @include u.desk{
        width: 40px;
        height: 40px;
        &.slick-prev{
          left: -10px;
          background-image: url(../images/arrows/slider-arrow-left-lightGrey-sm.svg);
          &:hover,&:focus{
            background-image: url(../images/arrows/slider-arrow-left-ice-sm.svg);
          }
        }
        &.slick-next{
          right: -10px;
          background-image: url(../images/arrows/slider-arrow-right-lightGrey-sm.svg);
          &:hover,&:focus{
            background-image: url(../images/arrows/slider-arrow-right-ice-sm.svg);
          }
        }
      }
    }//end slick arrow
  }//end slick slider
}//end profile slider

//Profile needs to be here instead of in node mixins because of fauxfile
@mixin profileStacked{
  margin-bottom: u.$spaceLg;
  @include u.tab{
    .widget-section > .layout--onecol &,.node-support-book &{
      @include safeFlex(row,nowrap,start,start);
    }
  }
  .stacked-intro{
    max-width: 380px;
    @include u.tab{
      .widget-section > .layout--onecol &{
        max-width: 203px;
        margin-right: 20px;
      }
    }
    .field-image{
      margin-bottom: 2rem;
    }
    .profile-stacked-icons{
      margin-bottom: u.$spaceSm;
      .profile-stacked-icon{
        color: c.$gold;
        font-size: 1.5rem;
        line-height: 2;
        @include safeFlex(row,nowrap,start,center);
        .icon-wrapper{
          width: 15px;
          height: 18px;
          margin-top: 4px;
          margin-right: u.$spaceXxs;
          svg path {
            fill: none;
            stroke: c.$gold;
          }
        }//end icon wrapper
      }//end profile stacked icon
    }//end profile stacked icons
  }//end stacked intro

  .stacked-text{
    max-width: 650px;
    @include u.tab{
      width: calc(100% - 223px);
    }
  }

  .stacked-title{
    font-family: f.$displayHeader;
    font-size: 3.25rem;
    line-height: 1.23;
    padding-right: 20px;
    margin-bottom: 1.5rem;
    a{
      color: c.$navy;
      @include dottedLink(c.$navy);
      &:hover,&:focus{
        color: c.$royal;
        background-image: none;
      }
    }
  }//end name
  .field-pronouns{
    font-size: 1.5rem;
    line-height: 2;
    text-transform: uppercase;
    margin-bottom: 1rem;
  }
  .field-departments{
    font-weight: f.$heavy;
    padding-right: 20px;
    font-size: 1.75rem;
    line-height: 1.71;
    & > div{
      display: inline-block;
      &:not(:last-child){
        &:after{
          content: ' |';
          margin-right: .25em;
          white-space: nowrap;
        }
      }
    }
  }//end field departments
  .field-job-title,.field-long-text,.field-position,.field-position-override{
    @extend .field-departments;
    font-family: f.$bodyText;
    font-weight: f.$regular;
  }//end job title

  .stacked-text-contact{
    border-top: 1px solid cc.$borderRule;
    padding-top: 2.5rem;
    margin-top: u.$spaceXs;
    font-size: 1.75rem;
    line-height: 1.42;
    &:not(:last-child){
      border-bottom: 1px solid cc.$borderRule;
    }
    .field{
      margin-bottom: u.$spaceXxs;
      &:last-child{
        margin-bottom: u.$spaceXs;
      }
    }
  }
  .field-office{
    @include safeFlex(row,nowrap,start,start);
    padding-right: 20px;
    .icon-wrapper{
			width: 16px;
			margin-right: 12px;
		}
		.field-content{
			width: calc(100% - 28px);
      a{
        display: inline-block;
        @include dottedLink(cc.$link);
        background-position: 0 94%;
        &:hover,&:focus{
          color: c.$navy;
          background: none;
        }
      }
		}//end field-content
		svg{
			max-height: 16px;
			margin-top: 3px;
      position: relative;
      top: 0;
      .cls-1{
        fill: c.$navy;
      }
		}
	}//end field office
	.field-email{
    @extend .field-office;
		svg{
			max-height: 16px;
      .cls-1{
        fill: c.$navy;
      }
		}
	}//end field email
  .field-phone{
    @extend .field-office;
		svg{
			max-height: 14px;
      fill: none;
      path{
        stroke: c.$navy;
      }
		}
	}//end field phone
  .field-office-hours{
    @extend .field-office;
		svg{
			max-height: 14px;
      fill: none;
      path{
        stroke: c.$navy;
      }
		}
	}//end field phone
  .text-long{
    margin-top: u.$spaceXs;
    line-height: 1.5;
  }
}//end profile stacked

/* ANIMATION MIXINS
--------------------- */
@mixin transition-animate($transition...) {
  html.animations-playing & {
    @include transition($transition...);
  }
}

@mixin animation($animate...) {
	$max: list.length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + list.nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}
  html.animations-playing & {
    -webkit-animation: $animations;
    -moz-animation:    $animations;
    -o-animation:      $animations;
    animation:         $animations;
  }
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

@include keyframes(fadeIn){
	from{
		opacity: 0;
	}
	50%{
		opacity: .5;
	}
	100%{
		opacity: 1;
	}
}

@include keyframes(breathe){
	from{
		scale: 1;
	}
	50%{
		scale: 1.075;
	}
	100%{
		scale: 1;
	}
}

@include keyframes(breatheFadeIn){
	from{
    opacity: 0;
		scale: 1;
	}
	50%{
    opacity: .4;
		scale: 1.075;
	}
	100%{
    opacity: 1;
		scale: 1;
	}
}

@include keyframes(flipRight){
	from{
		transform: rotateY(0);
	}
	100%{
		transform: rotateY(360deg);
	}
}
@include keyframes(flipLeft){
	from{
		transform: rotateY(0);
	}
	100%{
		transform: rotateY(-360deg);
	}
}

@include keyframes(fadeInDelay){
	from{
		opacity: 0;
	}
  75%{
    opacity: 0;
  }
	80%{
		opacity: .25;
	}
	100%{
		opacity: 1;
	}
}

@include keyframes(sealRollRight) {
  from {
    right: 200vw;
    transform: rotateZ(-360deg);
  }
  to {
    right: 10%;
    transform: rotateZ(0);
  }
}

@include keyframes(sealRollRightDesk) {
  from {
    right: 200vw;
    transform: rotateZ(-360deg);
  }
  to {
    right: 85%;
    transform: rotateZ(0);
  }
}

.fadeIn {
  html.animations-paused & {
    opacity: 1;
  }
  @include animation('fadeIn 1.5s 1');
}

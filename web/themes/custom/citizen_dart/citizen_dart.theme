<?php

/**
 * @file
 */

use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_preprocess_html().
 */
function citizen_dart_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if(isset($node_revision)){
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
    //set published or unpublished
    if($node->status[0]->value == '1'){
      $variables['attributes']['class'][] = 'published';
    } else {
      $variables['attributes']['class'][] = 'unpublished';
    }
    //check for hide breadcrumbs/nav
    if (isset($node->field_hide_nav[0]->value)){
      if ($node->field_hide_nav[0]->value == '1') {
        $variables['attributes']['class'][] = 'hide-nav';
      }
    }
    //add global hero class
    if (($node->field_hero) && ($node->field_hero[0])) {
      $variables['attributes']['class'][] = 'hero-' . $node->field_hero[0]->entity->field_hero_type[0]->value;
      if(($node->field_hero[0]->entity->field_hero_type[0]->value == 'pattern') && ($node->field_hero[0]->entity->field_links[0])){
        $variables['attributes']['class'][] = 'hero-pattern-links';
      }
    }else{
      $variables['attributes']['class'][] = 'hero-none';
    }
    if ($node->getType() == 'department'){
      $variables['attributes']['class'][] = 'hero-pattern';
      if($node->field_links[0]){
        $variables['attributes']['class'][] = 'hero-pattern-links';
      }
    }
    if (in_array($node->getType(), ['college', 'academic_program'])) {
      if ($node->field_image[0]) {
        $variables['attributes']['class'][] = 'hero-has-image';
      }
    }
  }
}

/**
 * Implements hook_preprocess webform to add form titles as twig variables.
 */
function citizen_dart_preprocess_webform(&$variables){
  $webform_id = $variables["element"]["#webform_id"];
  $webform = \Drupal\webform\Entity\Webform::load($webform_id);
  if ($webform->get('webform_placer')) {
    $variables['webform_placer'] = TRUE;
  }
  if ($webform->get('show_placer_title')) {
    $variables['show_placer_title'] = TRUE;
  }
  $variables['title'] = $webform->label();
}

function citizen_dart_preprocess_paragraph__form_placer(&$variables) {
  $paragraph = isset($variables['paragraph']) ? $variables['paragraph'] : '';
  if (isset($paragraph->field_form_title->value)) {
    $form_title = $paragraph->field_form_title->value;
    $webform = $variables['elements']['field_form'][0]['#webform'];
    $webform->set('webform_placer', TRUE);
    $webform->set('show_placer_title', $form_title);
  }
}


// provide width and height dimensions for use in the responsive image template to prevent layout shifts
function citizen_dart_preprocess_responsive_image(&$variables) {
  // get responsive image style in order to map hard-coded dimension values
  $style_id = $variables['responsive_image_style_id'];

  switch ($style_id) {
    case 'banner':
      $img_width = 1194;
      $img_height = 786;
      // get the url for each image style being preloaded
      $deskURL = ImageStyle::load('banner_desk')->buildUrl($variables['uri']);
      $midDeskURL = ImageStyle::load('banner_middesk')->buildUrl($variables['uri']);
      $bigDeskURL = ImageStyle::load('banner_big_desk')->buildUrl($variables['uri']);
      $wideDeskURL = ImageStyle::load('banner_wide_desk')->buildUrl($variables['uri']);
      // construct links for each image style being preloaded
      $deskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $deskURL,'media' => '(min-width:896px) and (max-width:1247.9px)',],];
      $midDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $midDeskURL,'media' => '(min-width:1248px) and (max-width:1559.9px)',],];
      $bigDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $bigDeskURL,'media' => '(min-width:1560px) and (max-width:1799.9px)',],];
      $wideDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $bigDeskURL,'media' => '(min-width:1800px)',],];
      // attach links for each image style being preloaded
      $variables['#attached']['html_head'][] = [$deskLinkTag, 'preloadBannerImageDesk'];
      $variables['#attached']['html_head'][] = [$midDeskLinkTag, 'preloadBannerImageMidDesk'];
      $variables['#attached']['html_head'][] = [$bigDeskLinkTag, 'preloadBannerImageBigDesk'];
      $variables['#attached']['html_head'][] = [$wideDeskLinkTag, 'preloadBannerImageWideDesk'];
      break;
    case '1920x1445':
      $img_width = 1192;
      $img_height = 897;
      // get the url for each image style being preloaded
      $deskURL = ImageStyle::load('1192x897')->buildUrl($variables['uri']);
      $midDeskURL = ImageStyle::load('1440x1084')->buildUrl($variables['uri']);
      $bigDeskURL = ImageStyle::load('1680x1260')->buildUrl($variables['uri']);
      $wideDeskURL = ImageStyle::load('1920x1445')->buildUrl($variables['uri']);
      // construct links for each image style being preloaded
      $deskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $deskURL,'media' => '(min-width:896px) and (max-width:1247.9px)',],];
      $midDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $midDeskURL,'media' => '(min-width:1248px) and (max-width:1559.9px)',],];
      $bigDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $bigDeskURL,'media' => '(min-width:1560px) and (max-width:1799.9px)',],];
      $wideDeskLinkTag = ['#tag' => 'link','#attributes' => ['rel' => 'preload','as' => 'image','href' => $bigDeskURL,'media' => '(min-width:1800px)',],];
      // attach links for each image style being preloaded
      $variables['#attached']['html_head'][] = [$deskLinkTag, 'preloadBannerImageDesk'];
      $variables['#attached']['html_head'][] = [$midDeskLinkTag, 'preloadBannerImageMidDesk'];
      $variables['#attached']['html_head'][] = [$bigDeskLinkTag, 'preloadBannerImageBigDesk'];
      $variables['#attached']['html_head'][] = [$wideDeskLinkTag, 'preloadBannerImageWideDesk'];
      break;
    case '42x42':
      $img_width = 42;
      $img_height = 42;
      break;
    case '200x200_non_crop':
      $img_width = 200;
      $img_height = 200;
      break;
    case '240x240':
      $img_width = 240;
      $img_height = 240;
      break;
    case '393x221':
      $img_width = 393;
      $img_height = 221;
      break;
    case '400x400_non_crop':
      $img_width = 400;
      $img_height = 400;
      break;
    case '426x426':
      $img_width = 426;
      $img_height = 426;
      break;
    case '426x508':
      $img_width = 426;
      $img_height = 426;
      break;
    case '492x492':
      $img_width = 492;
      $img_height = 492;
      break;
    case '539x304':
      $img_width = 539;
      $img_height = 304;
      break;
    case '600x600_non_crop':
      $img_width = 600;
      $img_height = 600;
      break;
    case '650x650':
      $img_width = 650;
      $img_height = 650;
      break;
    case '730x840':
      $img_width = 730;
      $img_height = 840;
      break;
    case '758x428':
      $img_width = 758;
      $img_height = 428;
      break;
    case '1096x619':
      $img_width = 1096;
      $img_height = 619;
      break;
    case '874x492':
      $img_width = 874;
      $img_height = 492;
      break;
    case 'square':
      $img_width = 360;
      $img_height = 360;
      break;
    case '1920x1920':
      $img_width = 1920;
      $img_height = 1920;
      break;
    default:
      $img_width = 'default';
      $img_height = 'default';
      break;
  }

  // set responsive fallback image attributes for width, height, fetchpriority
  if (!($img_width == 'default' || $img_height == 'default' )) {
    $variables['img_element']['#attributes']['width'] = $img_width;
    $variables['img_element']['#attributes']['height'] = $img_height;
    if (($style_id == 'banner') || ($style_id == '1920x1445')){
      $variables['img_element']['#attributes']['fetchpriority'] = 'high';
    }
  }
}

/**
 * Preprocess function to provide a unique ID to the hours field template.
 */
function citizen_dart_preprocess_field__node__field_hours(&$variables) {
  // Add a unique ID to the field template.
  $variables['unique_id'] = uniqid();
}

/**
 * Implements template_preprocess_breadcrumb().
 */
function citizen_dart_preprocess_breadcrumb(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');

  // Find node title for custom breadcrumbs.
  if ($node_revision) {
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
    $variables['currentNode'] = $node;

    // Node type-specific updates.
    switch ($node->getType()) {
      case 'academic_program':
        // Program crumbs should be to Home > Academics >
        // Programs [Majors & Minors node] > [Degree Level field] > [Program].
        // They should have Home > Academics by default, so we build on top of
        // that base.
        $majors_minors_node_id = 1886;

        // Create the "Programs" link, directly to the Majors & Minors node.
        $major_minor_url = Url::fromRoute('entity.node.canonical', ['node' => $majors_minors_node_id]);
        $variables['links'][] = Link::fromTextAndUrl(t('Programs'), $major_minor_url);

        // Create the Degree Level link, directly to a search entry on M&Ms.
        $degree_level = $node->get('field_degree_level')->first()->value;
        $degree_level_options = options_allowed_values($node->get('field_degree_level')->getFieldDefinition()->getFieldStorageDefinition(), $node);
        $degree_level_label = isset($degree_level_options[$degree_level]) ? $degree_level_options[$degree_level] : $degree_level;

        // Link directly to a search and the section with results.
        $degree_level_url = Url::fromRoute('entity.node.canonical', [
          'node' => $majors_minors_node_id,
          'degree_level_filter' => $degree_level,
        ], ['fragment' => 'node-section-2']);
        $variables['links'][] = Link::fromTextAndUrl($degree_level_label, $degree_level_url);

        break;
    }
  }

  // Process every link to form the end result.
  // @see theme.inc:template_preprocess_breadcrumb().
  foreach ($variables['links'] as $key => $link) {
    $variables['breadcrumb'][$key] = ['text' => $link->getText(), 'url' => $link->getUrl()->toString()];
  }
}

/**
 * Implements hook_form_alter.
 */
function citizen_dart_form_alter(&$form, FormStateInterface $form_state) {
  if($form['#id'] == 'site-search-form'){
    $form['actions']['submit']['#suffix'] = '<span class="material-icons">search</span>';
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function citizen_dart_theme_suggestions_page_alter(array &$suggestions, array $variables, $hook) {
  // Try to get the node, so we can check if we're on the node page.
  $node = Drupal::request()->attributes->get('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if($node_revision){
    $vid = $node_revision->getRevisionId();
  }
  if ($node) {
    if ((!$node instanceof NodeInterface) && (isset($vid))) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
    }
    $suggestions[] = 'page__' . $node->getTYpe();
  }
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->bundle();
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function citizen_dart_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function citizen_dart_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    $block_name = str_replace(' ','_',strtolower($variables['elements']['content']['#block_content']->label()));
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
    array_splice($suggestions, 2, 0, 'block__' . $block_name);
    array_splice($suggestions, 3, 0, 'block__' . $variables['elements']['content']['#block_content']->id());
  }
}

/**
 * Implements hook_theme_suggestions_paragraph_alter.
 */
function citizen_dart_theme_suggestions_breadcrumb_alter(array &$suggestions, array $variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
  if($node_revision){
    $vid = $node_revision->getRevisionId();
  }
  if ((!$node instanceof NodeInterface) && (isset($vid))) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($vid);
  }
  if ($node){
    array_push($suggestions, 'breadcrumb__' . $node->getType());
  }
}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function citizen_dart_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $id = $paragraph->id();
  // array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
  array_push($suggestions, 'paragraph__' . $paragraph->getType() . '__' . $id);
}

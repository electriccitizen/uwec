{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{% extends 'node--teaser.html.twig' %}
{% set classes = [
  'node-teaser',
  'node-teaser-' ~ node.type.0.target_id|clean_class,
] %}

{% block nodeTitle %}{% endblock %}

{% block nodeContent %}
  {{ content.body}}
	<div class="testimonial-details">
    <div class="stripes">
      <svg width="169" height="225" viewBox="0 0 169 225" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M170.986 140.195L-11.7559 192.596L-2.50916 224.843L180.233 172.442L170.986 140.195Z" fill="#26B1ED"/>
        <path d="M170.992 70.4805L-11.75 122.881L-2.5033 155.128L180.239 102.728L170.992 70.4805Z" fill="#26B1ED"/>
        <path d="M170.994 0.757832L-11.748 53.1582L-2.50134 85.4053L180.24 33.0049L170.994 0.757832Z" fill="#26B1ED"/>
      </svg>
    </div>
    <div class="testimonial-details-inner">
      {%- if content.field_eyebrow.0['#plain_text']  -%}
        <div class="testimonial-eyebrow">{{- content.field_eyebrow.0['#plain_text'] -}}</div>
      {%- endif -%}
      {% if content.field_image %}
        <div class="testimonial-image">{{ content.field_image }}</div>
      {% endif %}
      <div class="testimonial-title">{{- label.0['#context'].value -}}</div>
      {%- if content.field_position.0['#context'].value -%}
        <div class="testimonial-positions">{{- content.field_position.0['#context'].value -}}</div>
      {%- endif -%}
      {%- if content.field_major.0['#context'].value -%}
        <div class="testimonial-major">{{- content.field_major.0['#context'].value -}}</div>
      {%- endif -%}
      {%- if content.field_grad_year.0['#context'].value -%}
        <div class="testimonial-grad-year">{{- content.field_grad_year.0['#context'].value -}}</div>
      {%- endif -%}
    </div>
	</div>
{% endblock %}

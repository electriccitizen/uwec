<?php

use Drupal\paragraphs\Entity\Paragraph;
/**
 * @file
 * Contains citizen_custom.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Site\Settings;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function citizen_custom_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the citizen custom module.
    case 'help.page.citizen_custom':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom glue module for Electric Citizen sites') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_theme().
 */
function citizen_custom_theme() {
  return [
    'citizen_custom' => [
      'template' => 'citizen_custom',
      'render element' => 'children',
    ],
    'site_search' => [
      'variables' => [
        'title' => 'Site Search',
      ],
    ],
	'social_share_block' => [
      'variables' => [
        'title' => 'Social Share',
		'data' => [],
      ],
    ],
    'announcements_ajax'=>[
      'render element'=>'children',
      'template' => 'announcements-ajax',
      'variables'=>[
        'nids'=>[],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function citizen_custom_preprocess_html(&$variables){
 	// Add role classes for current user to body.
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  foreach($userRole as $role ){
    if($role != 'authenticated'){
      $variables['attributes']['class'][] = 'role-' . $role;
    }
    if($user->id() == '1'){
    	$variables['attributes']['class'][] = 'role-super-user';
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function citizen_custom_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'site_search') {
    $variables['attributes']['role'] = 'search';
  }
  // Set custom help text.
  if ($variables['plugin_id'] == 'help_block') {
    $route_name = \Drupal::routeMatch()->getRouteName();
    $parameters = \Drupal::routeMatch()->getCurrentRouteMatch()->getParameters();
    if (isset($variables['content'][0]['#markup'])){
      switch ($route_name) {
        case 'layout_builder.defaults.node.view':
          if($parameters->get('node_type')){
            $nodeType = $parameters->get('node_type');
            $cleanType = ucwords(str_replace("_"," ",$nodeType)) . ' ';
          }
          $output = '';
          $output .= '<h2>' . $cleanType . t('Layout Builder') . '</h2>';
          $output .= '<p><strong>' . t('WARNING: ') . '</strong>'. t('Changes to this layout will affect all non-customized ') . str_replace("_"," ",$nodeType) . t(' nodes.') . '</p>';
          $output .= '<p><small>' . t('Forms and links inside the content of the layout builder tool have been disabled.') . '</small></p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.view':
          $output = '';
          $output .= '<h2>' . t('Customize This Layout') . '</h2>';
          $output .= '<p><strong>' . t('WARNING: ') . '</strong>'. t('Saving this layout (even without making changes) will turn this into a custom node. Custom nodes will not reflect any future global changes to the content type. If you are here in error, click "View" or "Edit" above to exit.') . '</p>';
          $output .= '<p><small>' . t('Forms and links inside the content of the layout builder tool have been disabled.') . '</small></p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.discard_changes':
          $output = '';
          $output .= '<h2>' . t('Discard Changes') . '</h2>';
          $output .= '<p>' . t('Remove any non-saved changes made in layout customization.') . '</p>';
          $variables['content'][0]['#markup'] = $output;
          break;
        case 'layout_builder.overrides.node.revert':
          $output = '';
          $output .= '<h2>' . t('Revert Custom Layout') . '</h2>';
          $output .= '<p>' . t('Revert this layout to the default layout for this content type.') . '</p>';
          $variables['content'][0]['#markup'] = $output;
          break;
      }

    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function citizen_custom_page_attachments(array &$attachments) {
	// Add custom admin theme files to admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'citizen_custom/admin-global';
  }
}

/**
 * Implements hook_form_alter().
 */
function citizen_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formId = $form['#id'];
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  // Remove layout builder revision info access (to hide unneeded revision field).
  if (strpos($form_id, 'layout_builder_form') > 0) {
    $form['advanced']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['revision']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_form_alter().
 */
function citizen_custom_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  // Change promotion text to something more contextual.
  if ($node->getType() == 'news') {
    $form['promote']['widget']['value']['#title'] = 'Add to Featured Stories';
  }
  if ($node->getType() == 'contact') {
    if (in_array($form_id, array('node_contact_edit_form', 'node_contact_form'))) {
      $form['field_address']['widget'][0]['address']['#after_build'][] = 'citizen_custom_address_organization_label';
    }
  }
  // Set help text for title field on testimonials
  if ($node->getType() == 'testimonial' || $node->getType() == 'video_card') {
    $form['title']['widget'][0]['value']['#description'] = '<p>' . t('This is the person\'s name.') . '</p>';
  }
}

function citizen_custom_address_organization_label($element, $form_state) {
  $element['organization']['#title'] = t('Building');
  return $element;
}
/**
 * Implements hook_local_tasks_alter().
 */
function citizen_custom_local_tasks_alter(&$local_tasks) {
  // Hide redirects settings from non admins.
  $user = \Drupal::currentUser();
  $userRole = $user->getRoles();
  if(!in_array('administrator', $userRole)){
    if(isset($local_tasks['redirect.list'])){
      unset($local_tasks['redirect.list']);
    }
    if(isset($local_tasks['redirect.settings'])){
      unset($local_tasks['redirect.settings']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\search\Form\SearchBlockForm
 */
function citizen_custom_form_site_search_form_alter(&$form, FormStateInterface $form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Implements hook_field_widget_single_element_form_alter()).
 */
function citizen_custom_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  // Add paragraph type classes to paragraph previews.
  if ($field_definition->getType() == 'entity_reference_revisions') {
    if (isset($element['#paragraph_type'])) {
      $type = $element['#paragraph_type'];
      $element['top']['type']['#attributes']['class'][] = str_replace('_','-',$type);
      if(isset($element['top']['type']['icon'])){
        unset($element['top']['type']['icon']);
      }
    }
  }
  // Add custom link help text for emails.
  if ($field_definition->getType() == 'link') {
    if ($element['uri']['#description'] && ($field_definition->getUniqueIdentifier() == "menu_link_content-link")) {
      $linkHelp = $element['uri']['#description'];
      $element['uri']['#description']['#items'][] = t('To create an email link, enter "<strong>mailto:</strong>example@email.com".');
    }
  }
}

/**
 * Implements views_pre_view().
 */
function citizen_custom_views_pre_view($view, $display_id, &$args) {
	// Alters views to accept fields from related paragraphs to be used for filters.
  if(isset($view->element['#name'])) {
    if ((($view->element['#name'] === 'facts') && ($view->current_display === 'list')) || (($view->element['#name'] === 'news') && ($view->current_display === 'recent_three')) || (($view->element['#name'] === 'news') && ($view->current_display === 'recent_two')) || (($view->element['#name'] === 'video_cards') && ($view->current_display === 'recent_three')) || (($view->element['#name'] === 'bios') && ($view->current_display === 'profiles_list')) || (($view->element['#name'] === 'snapshots') && ($view->current_display === 'list')) || (($view->element['#name'] === 'testimonials') && ($view->current_display === 'list'))) {
      $filters = $view->display_handler->getOption('filters');
      $sorts = $view->display_handler->getOption('sorts');
      $paragraph_id = $view->args[0];

      if ($paragraph_id){
        $paragraph = Paragraph::load($paragraph_id);
        //unset or alter placement tag filter
        if($paragraph->field_placement_tag[0]){
          //make an array out of the placement tag set in the paragraph
          $placements = [];
          foreach ($paragraph->field_placement_tag as $delta => $placement) {
            $placements[] = $placement->target_id;
          }
          // replace the placement_tag_tid filter with the paragraph placement tag
          $filters['field_placement_tags_target_id']['value'] = $placements;
        } else {
          //if the placement tag field is not used, then unset the placement tag filter
          if ($filters['field_placement_tags_target_id']) {
            unset($filters['field_placement_tags_target_id']);
          }
        }//end placement tags filter
        if($paragraph->field_page_family[0]){
          //make an array out of the page family set in the paragraph
          $families = [];
          foreach ($paragraph->field_page_family as $delta => $family) {
            $families[] = $family->target_id;
          }
          // replace the page_families_tid filter with the paragraph page family
          $filters['field_page_families_target_id']['value'] = $families;
        } else {
          //if the page family field is not used, then unset the page families filter
          if ($filters['field_page_families_target_id']) {
            unset($filters['field_page_families_target_id']);
          }
        }//end page families filter

        if(isset($paragraph->field_type[0])){
          //make an array out of the type set in the paragraph
          $types = [];
          foreach ($paragraph->field_type as $delta => $type) {
            $types[] = $type->target_id;
          }
          // replace the story_type_tid filter with the paragraph type (need to check if the filter is there first since videos don't have them)
          if (isset($filters['field_story_type_target_id'])) {
	          $filters['field_story_type_target_id']['value'] = $types;
	        }
        } else {
          //if the type field is not used, then unset the type filter
          if (isset($filters['field_story_type_target_id'])) {
            unset($filters['field_story_type_target_id']);
          }
        }//end filter

        // make the view's snapshot_type filter match what the user selected in the paragraph
        if(isset($paragraph->field_snapshot_type[0])){
          // make an array out of the snapshot type set in the paragraph
          $snapshot_types = [];
          foreach($paragraph->field_snapshot_type as $delta => $snapshot_type){
            $snapshot_types[] = $snapshot_type->target_id;
          }

          // replace the snapshot_type_target_id filter with the paragraph's snapshot type
          if(isset($filters['field_snapshot_type_target_id'])){
            $filters['field_snapshot_type_target_id']['value'] = $snapshot_types;
          }
        }else{
          // the snapshot type field is not set in the paragraph, so unset it in the view
          if(isset($filters['field_snapshot_type_target_id'])){
            unset($filters['field_snapshot_type_target_id']);
          }
        }

        $view->display_handler->setOption('filters', $filters);

        // change the pager if the paragraph has a limit lists field used
				if(isset($paragraph->field_limit_list[0]) && $paragraph->field_limit_list[0]->value != 0){
					$per_page = $paragraph->field_limit_list[0]->value;
					$pager = $view->display_handler->getOption('pager');
					$pager['type'] = 'some';
					$view->setItemsPerPage($per_page);
					$view->display_handler->setOption('pager', $pager);
				}

				// change the sort on profiles lists view if randomize is used on the profiles list paragraph
				if(isset($paragraph->field_randomize[0]) && $paragraph->field_randomize[0]->value == '1'){
					unset($sorts['field_last_name_value']);
				}else{
					unset($sorts['random']);
				}
				$view->display_handler->setOption('sorts', $sorts);
      }
    }
  }
}

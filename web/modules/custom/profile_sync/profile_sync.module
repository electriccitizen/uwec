<?php
use Drupal\Core\Access\AccessResult;

// syncs profiles when cron runs,
// if there is a new file
function profile_sync_cron() {
	$sync = \Drupal::service('profile_sync.sync');
	if($sync->hasNewFile()){
		$sync->run();
		$sync->deleteOldFiles();
	}
}


// disables the fields that are controlled by the sync
// so users can't accidentally edit something that the feed would overwrite.
function profile_sync_form_node_bios_edit_form_alter(&$form, $form_state, $form_id) {
	$user = \Drupal::currentUser();
	$roles = $user->getRoles();
	$disable_fields = [];
	$hide_fields = [];
	if (!in_array('administrator', $roles)) {
		$disable_fields = [
			'field_username',
			'field_email',
			'field_phone',
			'field_first_name',
			'field_last_name',
			'field_position',
		];
		$hide_fields = [
			'field_empl_id',
		];
		if (isset($form['field_position']['widget']['add_more'])) {
			// Hide the "Add another item" button.
			$form['field_position']['widget']['add_more']['#access'] = FALSE;
		}

		// if we're not a site admin, hide the "active" field, too.
		if(!in_array('site_admin', $roles)){
			$hide_fields[] = 'field_active';
		}
	}

	foreach ($disable_fields as $field_name) {
		if (isset($form[$field_name])) {
			$form[$field_name]['#disabled'] = TRUE;
		}
	}
	foreach ($hide_fields as $field_name) {
		if (isset($form[$field_name])) {
			$form[$field_name]['#access'] = FALSE;
		}
	}
}


// disable some fields on the user form
// because these fields would just be immediately overridden by this feed.
function profile_sync_form_user_form_alter(&$form, $form_state, $form_id) {
	$user = \Drupal::currentUser();

	// don't disable any fields for administrators
	if(in_array('administrator', $user->getRoles())) return;

	// if the empl_id field is set, disable feed fields
	if(isset($form['field_empl_id'])){
		$empl_id = $form['field_empl_id']['widget'][0]['value']['#default_value'];
		if(!empty($empl_id)){
			$form['account']['mail']['#disabled'] = TRUE;
			$form['account']['name']['#disabled'] = TRUE;

			$sync_fields = [
				'field_first_name',
				'field_last_name',
			];

			foreach ($sync_fields as $field_name) {
				if (isset($form[$field_name])) {
					$form[$field_name]['#disabled'] = TRUE;
				}
			}
		}
	}
}


// allow users to update their own profile
function profile_sync_node_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account){
	// ignore all permissions stuff for super users
	if(in_array('administrator', $account->getRoles())){
		return AccessResult::neutral();
	}

	$type = $entity->bundle();

	// custom access logic for updating profiles (bios)
	if($type === 'bios' && $operation == 'update'){
		// site admins can update all profiles
		if(in_array('site_admin', $account->getRoles())){
			return AccessResult::allowed()->cachePerPermissions();
		}

		// non-site-admins can only update their own profile
		// so let's make sure the profile's empl_id matches the account's empl_id
		$bio_empl_id = $entity->field_empl_id->getString();
		$user = \Drupal\user\Entity\User::load($account->id());
		$user_empl_id = $user->field_empl_id->getString();
		if($bio_empl_id === $user_empl_id){
			return AccessResult::allowed()->cachePerUser();
		}else{
			return AccessResult::forbidden()->cachePerUser();
		}
	}

	// this means this hook has no opinion on access:
	return AccessResult::neutral();
}
